import { Loader } from '@googlemaps/js-api-loader';

interface MapOptions {
    apiKey: string;
    center?: google.maps.LatLngLiteral;
    zoom?: number;
}

// Variables globales con tipos nullables
let map: google.maps.Map | null = null;
let marker: google.maps.Marker | null = null;
let mapLoader: Loader | null = null;

// Valores por defecto
const defaultCenter = { lat: -34.6037, lng: -58.3816 }; // Buenos Aires
const defaultZoom = 13;

// Función de inicialización del mapa
const initMap = async (options: MapOptions): Promise<google.maps.Map> => {
    try {
        if (!options.apiKey) {
            throw new Error('API Key is required');
        }

        mapLoader = new Loader({
            apiKey: options.apiKey,
            version: 'weekly',
        });

        const google = await mapLoader.load();
        const mapElement = document.getElementById('map');
        
        if (!mapElement) {
            throw new Error('Map container not found');
        }

        map = new google.maps.Map(mapElement, {
            center: options.center || defaultCenter,
            zoom: options.zoom || defaultZoom,
        });

        marker = new google.maps.Marker({
            map,
            draggable: true,
            position: options.center || defaultCenter
        });

        if (marker) {
            marker.addListener('dragend', () => {
                const position = marker?.getPosition();
                if (position) {
                    console.log(`Marker coordinates: ${position.lat()}, ${position.lng()}`);
                }
            });
        }

        return map;
    } catch (error) {
        console.error('Error initializing map:', error);
        throw error;
    }
};

// Función de geocodificación
const geocodeAddress = async (address: string, shouldCenter: boolean = false): Promise<void> => {
    if (!map || !marker || !mapLoader) {
        console.error('Map not initialized');
        return;
    }

    try {
        const google = await mapLoader.load();
        const geocoder = new google.maps.Geocoder();

        const results = await new Promise<google.maps.GeocoderResult[]>((resolve, reject) => {
            geocoder.geocode({ address }, (results, status) => {
                if (status === 'OK' && results) {
                    resolve(results);
                } else {
                    reject(status);
                }
            });
        });

        if (results.length > 0) {
            const location = results[0].geometry.location;
            
            marker.setPosition(location);

            if (shouldCenter) {
                map.setCenter(location);
                map.setZoom(16);
            }
        }
    } catch (error) {
        console.error('Geocoding error:', error);
    }
};

// Declarar tipos globales para window
declare global {
    interface Window {
        initMap: (options: MapOptions) => Promise<google.maps.Map>;
        geocodeAddress: (address: string, shouldCenter: boolean) => Promise<void>;
    }
}

// Exponer funciones globalmente
window.initMap = initMap;
window.geocodeAddress = geocodeAddress;

let map: google.maps.Map | null = null;
let marker: google.maps.Marker | null = null;
let mapLoader: Loader | null = null;

// Valores por defecto
const defaultCenter = { lat: -34.6037, lng: -58.3816 }; // Buenos Aires
const defaultZoom = 13;

// Función para inicializar el mapa con opciones
const initMap = async (options: MapOptions) => {
    if (!options.apiKey) {
        throw new Error('API Key is required');
    }

    mapLoader = new Loader({
        apiKey: options.apiKey,
        version: 'weekly',
    });

    try {
        const google = await mapLoader.load();
        const mapElement = document.getElementById('map') as HTMLElement;
        
        map = new google.maps.Map(mapElement, {
            center: options.center || defaultCenter,
            zoom: options.zoom || defaultZoom,
        });

        marker = new google.maps.Marker({
            map,
            draggable: true,
            position: options.center || defaultCenter
        });

        marker.addListener('dragend', () => {
            const newPosition = marker.getPosition();
            if (newPosition) {
                console.log(`Marker coordinates: Latitude ${newPosition.lat()}, Longitude ${newPosition.lng()}`);
            }
        });

        return map;
    } catch (e) {
        console.error('Error loading Google Maps API:', e);
        throw e;
    }
};

const geocodeAddress = async (address: string, isCenter: boolean = false) => {
    if (!map || !marker || !mapLoader) {
        console.error('Map not initialized');
        return;
    }

    try {
        const google = await mapLoader.load();
        const geocoder = new google.maps.Geocoder();

        const result = await new Promise<google.maps.GeocoderResult[]>((resolve, reject) => {
            geocoder.geocode({ address }, (results, status) => {
                if (status === 'OK' && results) {
                    resolve(results);
                } else {
                    reject(status);
                }
            });
        });

        if (result.length > 0) {
            const location = result[0].geometry.location;
            marker.setPosition(location);

            if (isCenter) {
                map.setCenter(location);
                map.setZoom(16);
            }
        }
    } catch (error) {
        console.error('Geocoding error:', error);
    }
};

// Exponemos las funciones al objeto window para que page.js pueda usarlas
declare global {
    interface Window {
        initMap: (options: MapOptions) => Promise<google.maps.Map>;
        geocodeAddress: (address: string, isCenter: boolean) => Promise<void>;
    }
}

window.initMap = initMap;
window.geocodeAddress = geocodeAddress;
window.geocodeAddress = geocodeAddress;
            const newCoords = { lat: location.lat, lng: location.lng };
            if (map) {
                map.panTo(newCoords);
                if (isCenter) {
                    map.setZoom(14);
                }
            }
            if (marker) {
                marker.setPosition(newCoords);
            }
        } else {
            alert('Dirección no encontrada.');
        }
    } catch (error) {
        console.error('Error al obtener coordenadas:', error);
        alert('Error al conectar con la API.');
    }
};

// Manejadores de eventos para los formularios
document.getElementById('localityForm')?.addEventListener('submit', (event) => {
    event.preventDefault();
    const localityInput = document.getElementById('localidadInput') as HTMLInputElement;
    if (localityInput.value) {
        geocodeAddress(localityInput.value, true);
    }
});

document.getElementById('addressForm')?.addEventListener('submit', (event) => {
    event.preventDefault();
    const streetInput = document.getElementById('streetInput') as HTMLInputElement;
    const numberInput = document.getElementById('numberInput') as HTMLInputElement;
    const localityInput = document.getElementById('localidadInput') as HTMLInputElement;

    if (streetInput.value && numberInput.value && localityInput.value) {
        const fullAddress = `${streetInput.value} ${numberInput.value}, ${localityInput.value}`;
        geocodeAddress(fullAddress);
    }
});

initMap();