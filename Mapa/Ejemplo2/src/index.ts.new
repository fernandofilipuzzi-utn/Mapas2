import { Loader } from '@googlemaps/js-api-loader';

interface MapOptions {
    apiKey: string;
    center?: google.maps.LatLngLiteral;
    zoom?: number;
}

class GoogleMaps {
    private map: google.maps.Map | null = null;
    private marker: google.maps.marker.AdvancedMarkerElement | null = null;
    private mapLoader: Loader | null = null;
    private static instance: GoogleMaps | null = null;

    // Valores por defecto
    private static readonly DEFAULT_CENTER = { lat: -34.6037, lng: -58.3816 }; // Buenos Aires
    private static readonly DEFAULT_ZOOM = 13;

    private constructor() {
        // Constructor privado para singleton
    }

    public static getInstance(): GoogleMaps {
        if (!GoogleMaps.instance) {
            GoogleMaps.instance = new GoogleMaps();
        }
        return GoogleMaps.instance;
    }

    /**
     * Inicializa el mapa con las opciones proporcionadas
     */
    public async init(options: MapOptions): Promise<google.maps.Map> {
        try {
            if (!options.apiKey) {
                throw new Error('API Key is required');
            }

            this.mapLoader = new Loader({
                apiKey: options.apiKey,
                version: 'weekly',
            });

            const google = await this.mapLoader.load();
            const mapElement = document.getElementById('map');
            
            if (!mapElement) {
                throw new Error('Map container not found');
            }

            this.map = new google.maps.Map(mapElement, {
                center: options.center || GoogleMaps.DEFAULT_CENTER,
                zoom: options.zoom || GoogleMaps.DEFAULT_ZOOM,
            });

            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker") as google.maps.MarkerLibrary;
            
            this.marker = new AdvancedMarkerElement({
                map: this.map,
                position: options.center || GoogleMaps.DEFAULT_CENTER,
                gmpDraggable: true,
                title: 'Drag me!'
            });

            this.setupMarkerListeners();

            return this.map;
        } catch (error) {
            console.error('Error initializing map:', error);
            throw error;
        }
    }

    /**
     * Configura los listeners del marcador
     */
    private setupMarkerListeners(): void {
        if (this.marker) {
            this.marker.addListener('dragend', () => {
                if (this.marker) {
                    const position = this.marker.position;
                    if (position) {
                        console.log(`Marker coordinates: ${position.lat}, ${position.lng}`);
                    }
                }
            });
        }
    }

    /**
     * Busca una dirección y actualiza el marcador en el mapa
     */
    public async geocodeAddress(address: string, shouldCenter: boolean = false): Promise<void> {
        if (!this.isInitialized()) {
            console.error('Map not initialized');
            return;
        }

        try {
            const google = await this.mapLoader!.load();
            const geocoder = new google.maps.Geocoder();

            const results = await new Promise<google.maps.GeocoderResult[]>((resolve, reject) => {
                geocoder.geocode({ address }, (results, status: google.maps.GeocoderStatus) => {
                    if (status === 'OK' && results) {
                        resolve(results);
                    } else {
                        reject(status);
                    }
                });
            });

            if (results.length > 0) {
                const location = results[0].geometry.location;
                
                if (this.marker) {
                    this.marker.position = location;
                }

                if (shouldCenter && this.map) {
                    this.map.setCenter(location);
                    this.map.setZoom(16);
                }
            }
        } catch (error) {
            console.error('Geocoding error:', error);
        }
    }

    /**
     * Verifica si el mapa está inicializado
     */
    private isInitialized(): boolean {
        return !!(this.map && this.marker && this.mapLoader);
    }

    /**
     * Obtiene la instancia del mapa
     */
    public getMap(): google.maps.Map | null {
        return this.map;
    }

    /**
     * Obtiene el marcador actual
     */
    public getMarker(): google.maps.marker.AdvancedMarkerElement | null {
        return this.marker;
    }
}

// Crear instancia singleton
const googleMapsInstance = GoogleMaps.getInstance();

// Declarar tipos globales para window
declare global {
    interface Window {
        initMap: (options: MapOptions) => Promise<google.maps.Map>;
        geocodeAddress: (address: string, shouldCenter: boolean) => Promise<void>;
        googleMaps: GoogleMaps;
    }
}

// Exponer funciones y la instancia globalmente
window.initMap = (options: MapOptions) => googleMapsInstance.init(options);
window.geocodeAddress = (address: string, shouldCenter: boolean) => googleMapsInstance.geocodeAddress(address, shouldCenter);
window.googleMaps = googleMapsInstance;

export default GoogleMaps;
